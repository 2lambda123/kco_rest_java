/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.klarna.rest.api.checkout.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.klarna.rest.api.checkout.model.CheckoutAggregatedOrderAddressV2;
import com.klarna.rest.api.checkout.model.CheckoutAggregatedOrderCartV2;
import com.klarna.rest.api.checkout.model.CheckoutAggregatedOrderPaymentProviderV2;
import com.klarna.rest.api.checkout.model.CheckoutAttachment;
import com.klarna.rest.api.checkout.model.CheckoutCustomerV2;
import com.klarna.rest.api.checkout.model.CheckoutGui;
import com.klarna.rest.api.checkout.model.CheckoutMerchantAggregatedOrderRequestUpdateV2;
import com.klarna.rest.api.checkout.model.CheckoutMerchantRequested;
import com.klarna.rest.api.checkout.model.CheckoutOptions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;

/**
 * CheckoutAggregatedOrderUpdateRequestV2
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-02T15:03:42.622Z")
public class CheckoutAggregatedOrderUpdateRequestV2 {
  @JsonProperty("locale")
  private String locale = null;

  @JsonProperty("status")
  private String status = null;

  @JsonProperty("cart")
  private CheckoutAggregatedOrderCartV2 cart = null;

  @JsonProperty("customer")
  private CheckoutCustomerV2 customer = null;

  @JsonProperty("gui")
  private CheckoutGui gui = null;

  @JsonProperty("merchant")
  private CheckoutMerchantAggregatedOrderRequestUpdateV2 merchant = null;

  @JsonProperty("options")
  private CheckoutOptions options = null;

  @JsonProperty("attachment")
  private CheckoutAttachment attachment = null;

  @JsonProperty("recurring")
  private Boolean recurring = false;

  @JsonProperty("reservation")
  private String reservation = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("started_at")
  private OffsetDateTime startedAt = null;

  @JsonProperty("completed_at")
  private OffsetDateTime completedAt = null;

  @JsonProperty("last_modified_at")
  private OffsetDateTime lastModifiedAt = null;

  @JsonProperty("expires_at")
  private OffsetDateTime expiresAt = null;

  @JsonProperty("purchase_country")
  private String purchaseCountry = null;

  @JsonProperty("purchase_currency")
  private String purchaseCurrency = null;

  @JsonProperty("merchant_reference")
  private Map<String, String> merchantReference = null;

  @JsonProperty("billing_address")
  private CheckoutAggregatedOrderAddressV2 billingAddress = null;

  @JsonProperty("shipping_address")
  private CheckoutAggregatedOrderAddressV2 shippingAddress = null;

  @JsonProperty("trader_id")
  private String traderId = null;

  @JsonProperty("external_payment_methods")
  private List<CheckoutAggregatedOrderPaymentProviderV2> externalPaymentMethods = null;

  @JsonProperty("external_checkouts")
  private List<CheckoutAggregatedOrderPaymentProviderV2> externalCheckouts = null;

  @JsonProperty("merchant_order_data")
  private String merchantOrderData = null;

  @JsonProperty("merchant_requested")
  private CheckoutMerchantRequested merchantRequested = null;

  public CheckoutAggregatedOrderUpdateRequestV2 locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * Get locale
   * @return locale
  **/
  @ApiModelProperty(value = "")
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 cart(CheckoutAggregatedOrderCartV2 cart) {
    this.cart = cart;
    return this;
  }

   /**
   * Get cart
   * @return cart
  **/
  @ApiModelProperty(value = "")
  public CheckoutAggregatedOrderCartV2 getCart() {
    return cart;
  }

  public void setCart(CheckoutAggregatedOrderCartV2 cart) {
    this.cart = cart;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 customer(CheckoutCustomerV2 customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @ApiModelProperty(value = "")
  public CheckoutCustomerV2 getCustomer() {
    return customer;
  }

  public void setCustomer(CheckoutCustomerV2 customer) {
    this.customer = customer;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 gui(CheckoutGui gui) {
    this.gui = gui;
    return this;
  }

   /**
   * Get gui
   * @return gui
  **/
  @ApiModelProperty(value = "")
  public CheckoutGui getGui() {
    return gui;
  }

  public void setGui(CheckoutGui gui) {
    this.gui = gui;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 merchant(CheckoutMerchantAggregatedOrderRequestUpdateV2 merchant) {
    this.merchant = merchant;
    return this;
  }

   /**
   * Get merchant
   * @return merchant
  **/
  @ApiModelProperty(value = "")
  public CheckoutMerchantAggregatedOrderRequestUpdateV2 getMerchant() {
    return merchant;
  }

  public void setMerchant(CheckoutMerchantAggregatedOrderRequestUpdateV2 merchant) {
    this.merchant = merchant;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 options(CheckoutOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @ApiModelProperty(value = "")
  public CheckoutOptions getOptions() {
    return options;
  }

  public void setOptions(CheckoutOptions options) {
    this.options = options;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 attachment(CheckoutAttachment attachment) {
    this.attachment = attachment;
    return this;
  }

   /**
   * Get attachment
   * @return attachment
  **/
  @ApiModelProperty(value = "")
  public CheckoutAttachment getAttachment() {
    return attachment;
  }

  public void setAttachment(CheckoutAttachment attachment) {
    this.attachment = attachment;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 recurring(Boolean recurring) {
    this.recurring = recurring;
    return this;
  }

   /**
   * Get recurring
   * @return recurring
  **/
  @ApiModelProperty(value = "")
  public Boolean isRecurring() {
    return recurring;
  }

  public void setRecurring(Boolean recurring) {
    this.recurring = recurring;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 reservation(String reservation) {
    this.reservation = reservation;
    return this;
  }

   /**
   * Get reservation
   * @return reservation
  **/
  @ApiModelProperty(value = "")
  public String getReservation() {
    return reservation;
  }

  public void setReservation(String reservation) {
    this.reservation = reservation;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

   /**
   * Get startedAt
   * @return startedAt
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 completedAt(OffsetDateTime completedAt) {
    this.completedAt = completedAt;
    return this;
  }

   /**
   * Get completedAt
   * @return completedAt
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getCompletedAt() {
    return completedAt;
  }

  public void setCompletedAt(OffsetDateTime completedAt) {
    this.completedAt = completedAt;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 lastModifiedAt(OffsetDateTime lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
    return this;
  }

   /**
   * Get lastModifiedAt
   * @return lastModifiedAt
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getLastModifiedAt() {
    return lastModifiedAt;
  }

  public void setLastModifiedAt(OffsetDateTime lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 expiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * Get expiresAt
   * @return expiresAt
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 purchaseCountry(String purchaseCountry) {
    this.purchaseCountry = purchaseCountry;
    return this;
  }

   /**
   * Get purchaseCountry
   * @return purchaseCountry
  **/
  @ApiModelProperty(value = "")
  public String getPurchaseCountry() {
    return purchaseCountry;
  }

  public void setPurchaseCountry(String purchaseCountry) {
    this.purchaseCountry = purchaseCountry;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 purchaseCurrency(String purchaseCurrency) {
    this.purchaseCurrency = purchaseCurrency;
    return this;
  }

   /**
   * Get purchaseCurrency
   * @return purchaseCurrency
  **/
  @ApiModelProperty(value = "")
  public String getPurchaseCurrency() {
    return purchaseCurrency;
  }

  public void setPurchaseCurrency(String purchaseCurrency) {
    this.purchaseCurrency = purchaseCurrency;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 merchantReference(Map<String, String> merchantReference) {
    this.merchantReference = merchantReference;
    return this;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 putMerchantReferenceItem(String key, String merchantReferenceItem) {
    if (this.merchantReference == null) {
      this.merchantReference = new HashMap<String, String>();
    }
    this.merchantReference.put(key, merchantReferenceItem);
    return this;
  }

   /**
   * Get merchantReference
   * @return merchantReference
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getMerchantReference() {
    return merchantReference;
  }

  public void setMerchantReference(Map<String, String> merchantReference) {
    this.merchantReference = merchantReference;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 billingAddress(CheckoutAggregatedOrderAddressV2 billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  @ApiModelProperty(value = "")
  public CheckoutAggregatedOrderAddressV2 getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(CheckoutAggregatedOrderAddressV2 billingAddress) {
    this.billingAddress = billingAddress;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 shippingAddress(CheckoutAggregatedOrderAddressV2 shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * Get shippingAddress
   * @return shippingAddress
  **/
  @ApiModelProperty(value = "")
  public CheckoutAggregatedOrderAddressV2 getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(CheckoutAggregatedOrderAddressV2 shippingAddress) {
    this.shippingAddress = shippingAddress;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 traderId(String traderId) {
    this.traderId = traderId;
    return this;
  }

   /**
   * Get traderId
   * @return traderId
  **/
  @ApiModelProperty(value = "")
  public String getTraderId() {
    return traderId;
  }

  public void setTraderId(String traderId) {
    this.traderId = traderId;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 externalPaymentMethods(List<CheckoutAggregatedOrderPaymentProviderV2> externalPaymentMethods) {
    this.externalPaymentMethods = externalPaymentMethods;
    return this;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 addExternalPaymentMethodsItem(CheckoutAggregatedOrderPaymentProviderV2 externalPaymentMethodsItem) {
    if (this.externalPaymentMethods == null) {
      this.externalPaymentMethods = new ArrayList<CheckoutAggregatedOrderPaymentProviderV2>();
    }
    this.externalPaymentMethods.add(externalPaymentMethodsItem);
    return this;
  }

   /**
   * Get externalPaymentMethods
   * @return externalPaymentMethods
  **/
  @ApiModelProperty(value = "")
  public List<CheckoutAggregatedOrderPaymentProviderV2> getExternalPaymentMethods() {
    return externalPaymentMethods;
  }

  public void setExternalPaymentMethods(List<CheckoutAggregatedOrderPaymentProviderV2> externalPaymentMethods) {
    this.externalPaymentMethods = externalPaymentMethods;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 externalCheckouts(List<CheckoutAggregatedOrderPaymentProviderV2> externalCheckouts) {
    this.externalCheckouts = externalCheckouts;
    return this;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 addExternalCheckoutsItem(CheckoutAggregatedOrderPaymentProviderV2 externalCheckoutsItem) {
    if (this.externalCheckouts == null) {
      this.externalCheckouts = new ArrayList<CheckoutAggregatedOrderPaymentProviderV2>();
    }
    this.externalCheckouts.add(externalCheckoutsItem);
    return this;
  }

   /**
   * Get externalCheckouts
   * @return externalCheckouts
  **/
  @ApiModelProperty(value = "")
  public List<CheckoutAggregatedOrderPaymentProviderV2> getExternalCheckouts() {
    return externalCheckouts;
  }

  public void setExternalCheckouts(List<CheckoutAggregatedOrderPaymentProviderV2> externalCheckouts) {
    this.externalCheckouts = externalCheckouts;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 merchantOrderData(String merchantOrderData) {
    this.merchantOrderData = merchantOrderData;
    return this;
  }

   /**
   * Get merchantOrderData
   * @return merchantOrderData
  **/
  @ApiModelProperty(value = "")
  public String getMerchantOrderData() {
    return merchantOrderData;
  }

  public void setMerchantOrderData(String merchantOrderData) {
    this.merchantOrderData = merchantOrderData;
  }

  public CheckoutAggregatedOrderUpdateRequestV2 merchantRequested(CheckoutMerchantRequested merchantRequested) {
    this.merchantRequested = merchantRequested;
    return this;
  }

   /**
   * Get merchantRequested
   * @return merchantRequested
  **/
  @ApiModelProperty(value = "")
  public CheckoutMerchantRequested getMerchantRequested() {
    return merchantRequested;
  }

  public void setMerchantRequested(CheckoutMerchantRequested merchantRequested) {
    this.merchantRequested = merchantRequested;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutAggregatedOrderUpdateRequestV2 aggregatedOrderUpdateRequestV2 = (CheckoutAggregatedOrderUpdateRequestV2) o;
    return Objects.equals(this.locale, aggregatedOrderUpdateRequestV2.locale) &&
        Objects.equals(this.status, aggregatedOrderUpdateRequestV2.status) &&
        Objects.equals(this.cart, aggregatedOrderUpdateRequestV2.cart) &&
        Objects.equals(this.customer, aggregatedOrderUpdateRequestV2.customer) &&
        Objects.equals(this.gui, aggregatedOrderUpdateRequestV2.gui) &&
        Objects.equals(this.merchant, aggregatedOrderUpdateRequestV2.merchant) &&
        Objects.equals(this.options, aggregatedOrderUpdateRequestV2.options) &&
        Objects.equals(this.attachment, aggregatedOrderUpdateRequestV2.attachment) &&
        Objects.equals(this.recurring, aggregatedOrderUpdateRequestV2.recurring) &&
        Objects.equals(this.reservation, aggregatedOrderUpdateRequestV2.reservation) &&
        Objects.equals(this.id, aggregatedOrderUpdateRequestV2.id) &&
        Objects.equals(this.startedAt, aggregatedOrderUpdateRequestV2.startedAt) &&
        Objects.equals(this.completedAt, aggregatedOrderUpdateRequestV2.completedAt) &&
        Objects.equals(this.lastModifiedAt, aggregatedOrderUpdateRequestV2.lastModifiedAt) &&
        Objects.equals(this.expiresAt, aggregatedOrderUpdateRequestV2.expiresAt) &&
        Objects.equals(this.purchaseCountry, aggregatedOrderUpdateRequestV2.purchaseCountry) &&
        Objects.equals(this.purchaseCurrency, aggregatedOrderUpdateRequestV2.purchaseCurrency) &&
        Objects.equals(this.merchantReference, aggregatedOrderUpdateRequestV2.merchantReference) &&
        Objects.equals(this.billingAddress, aggregatedOrderUpdateRequestV2.billingAddress) &&
        Objects.equals(this.shippingAddress, aggregatedOrderUpdateRequestV2.shippingAddress) &&
        Objects.equals(this.traderId, aggregatedOrderUpdateRequestV2.traderId) &&
        Objects.equals(this.externalPaymentMethods, aggregatedOrderUpdateRequestV2.externalPaymentMethods) &&
        Objects.equals(this.externalCheckouts, aggregatedOrderUpdateRequestV2.externalCheckouts) &&
        Objects.equals(this.merchantOrderData, aggregatedOrderUpdateRequestV2.merchantOrderData) &&
        Objects.equals(this.merchantRequested, aggregatedOrderUpdateRequestV2.merchantRequested);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locale, status, cart, customer, gui, merchant, options, attachment, recurring, reservation, id, startedAt, completedAt, lastModifiedAt, expiresAt, purchaseCountry, purchaseCurrency, merchantReference, billingAddress, shippingAddress, traderId, externalPaymentMethods, externalCheckouts, merchantOrderData, merchantRequested);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutAggregatedOrderUpdateRequestV2 {\n");
    
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    cart: ").append(toIndentedString(cart)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    gui: ").append(toIndentedString(gui)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    reservation: ").append(toIndentedString(reservation)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    lastModifiedAt: ").append(toIndentedString(lastModifiedAt)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    purchaseCountry: ").append(toIndentedString(purchaseCountry)).append("\n");
    sb.append("    purchaseCurrency: ").append(toIndentedString(purchaseCurrency)).append("\n");
    sb.append("    merchantReference: ").append(toIndentedString(merchantReference)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    traderId: ").append(toIndentedString(traderId)).append("\n");
    sb.append("    externalPaymentMethods: ").append(toIndentedString(externalPaymentMethods)).append("\n");
    sb.append("    externalCheckouts: ").append(toIndentedString(externalCheckouts)).append("\n");
    sb.append("    merchantOrderData: ").append(toIndentedString(merchantOrderData)).append("\n");
    sb.append("    merchantRequested: ").append(toIndentedString(merchantRequested)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

