/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.klarna.rest.api.checkout.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.klarna.rest.api.checkout.model.CheckoutAddress;
import com.klarna.rest.api.checkout.model.CheckoutAttachment;
import com.klarna.rest.api.checkout.model.CheckoutCustomer;
import com.klarna.rest.api.checkout.model.CheckoutGui;
import com.klarna.rest.api.checkout.model.CheckoutMerchantRequested;
import com.klarna.rest.api.checkout.model.CheckoutMerchantUrls;
import com.klarna.rest.api.checkout.model.CheckoutOptions;
import com.klarna.rest.api.checkout.model.CheckoutOrderLine;
import com.klarna.rest.api.checkout.model.CheckoutPaymentProvider;
import com.klarna.rest.api.checkout.model.CheckoutShippingOption;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * CheckoutOrder
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-04-02T15:03:42.622Z")
public class CheckoutOrder {
  @JsonProperty("order_id")
  private String orderId = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("purchase_country")
  private String purchaseCountry = null;

  @JsonProperty("purchase_currency")
  private String purchaseCurrency = null;

  @JsonProperty("locale")
  private String locale = null;

  @JsonProperty("status")
  private String status = null;

  @JsonProperty("billing_address")
  private CheckoutAddress billingAddress = null;

  @JsonProperty("shipping_address")
  private CheckoutAddress shippingAddress = null;

  @JsonProperty("order_amount")
  private Long orderAmount = null;

  @JsonProperty("order_tax_amount")
  private Long orderTaxAmount = null;

  @JsonProperty("order_lines")
  private List<CheckoutOrderLine> orderLines = new ArrayList<CheckoutOrderLine>();

  @JsonProperty("customer")
  private CheckoutCustomer customer = null;

  @JsonProperty("merchant_urls")
  private CheckoutMerchantUrls merchantUrls = null;

  @JsonProperty("html_snippet")
  private String htmlSnippet = null;

  @JsonProperty("merchant_reference1")
  private String merchantReference1 = null;

  @JsonProperty("merchant_reference2")
  private String merchantReference2 = null;

  @JsonProperty("started_at")
  private OffsetDateTime startedAt = null;

  @JsonProperty("completed_at")
  private OffsetDateTime completedAt = null;

  @JsonProperty("last_modified_at")
  private OffsetDateTime lastModifiedAt = null;

  @JsonProperty("options")
  private CheckoutOptions options = null;

  @JsonProperty("attachment")
  private CheckoutAttachment attachment = null;

  @JsonProperty("external_payment_methods")
  private List<CheckoutPaymentProvider> externalPaymentMethods = null;

  @JsonProperty("external_checkouts")
  private List<CheckoutPaymentProvider> externalCheckouts = null;

  @JsonProperty("shipping_countries")
  private List<String> shippingCountries = null;

  @JsonProperty("shipping_options")
  private List<CheckoutShippingOption> shippingOptions = null;

  @JsonProperty("merchant_data")
  private String merchantData = null;

  @JsonProperty("gui")
  private CheckoutGui gui = null;

  @JsonProperty("merchant_requested")
  private CheckoutMerchantRequested merchantRequested = null;

  @JsonProperty("selected_shipping_option")
  private CheckoutShippingOption selectedShippingOption = null;

  @JsonProperty("recurring")
  private Boolean recurring = false;

  @JsonProperty("recurring_token")
  private String recurringToken = null;

  @JsonProperty("recurring_description")
  private String recurringDescription = null;

  @JsonProperty("billing_countries")
  private List<String> billingCountries = null;

  @JsonProperty("tags")
  private List<String> tags = null;

   /**
   * Unique order ID that will be used for the entire lifecycle of the order. (max 255 characters)
   * @return orderId
  **/
  @ApiModelProperty(example = "f3392f8b-6116-4073-ab96-e330819e2c07", value = "Unique order ID that will be used for the entire lifecycle of the order. (max 255 characters)")
  public String getOrderId() {
    return orderId;
  }

   /**
   * The merchant name (max 255 characters).
   * @return name
  **/
  @ApiModelProperty(example = "Women's Fashion", value = "The merchant name (max 255 characters).")
  public String getName() {
    return name;
  }

  public CheckoutOrder purchaseCountry(String purchaseCountry) {
    this.purchaseCountry = purchaseCountry;
    return this;
  }

   /**
   * purchase country of the merchant&#39;s store. The format to be used is ISO 3166 alpha-2. Eg: GB, SE, DE, US, etc.   Note: purchase country and currency need to match the defined merchant configuration. For global configuration read this https://developers.klarna.com/documentation/klarna-checkout/kco-global/
   * @return purchaseCountry
  **/
  @ApiModelProperty(example = "US", required = true, value = "purchase country of the merchant's store. The format to be used is ISO 3166 alpha-2. Eg: GB, SE, DE, US, etc.   Note: purchase country and currency need to match the defined merchant configuration. For global configuration read this https://developers.klarna.com/documentation/klarna-checkout/kco-global/")
  public String getPurchaseCountry() {
    return purchaseCountry;
  }

  public void setPurchaseCountry(String purchaseCountry) {
    this.purchaseCountry = purchaseCountry;
  }

  public CheckoutOrder purchaseCurrency(String purchaseCurrency) {
    this.purchaseCurrency = purchaseCurrency;
    return this;
  }

   /**
   * purchase currency of the merchant&#39;s store. The format to be used is ISO 4217. Eg: USD, EUR, SEK, GBP, etc.  Note: purchase country and currency need to match the defined merchant configuration. For global configuration read this https://developers.klarna.com/documentation/klarna-checkout/kco-global/
   * @return purchaseCurrency
  **/
  @ApiModelProperty(example = "USD", required = true, value = "purchase currency of the merchant's store. The format to be used is ISO 4217. Eg: USD, EUR, SEK, GBP, etc.  Note: purchase country and currency need to match the defined merchant configuration. For global configuration read this https://developers.klarna.com/documentation/klarna-checkout/kco-global/")
  public String getPurchaseCurrency() {
    return purchaseCurrency;
  }

  public void setPurchaseCurrency(String purchaseCurrency) {
    this.purchaseCurrency = purchaseCurrency;
  }

  public CheckoutOrder locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * Used to define the language and region of the customer. RFC 1766 customer&#39;s locale.
   * @return locale
  **/
  @ApiModelProperty(example = "en-US", required = true, value = "Used to define the language and region of the customer. RFC 1766 customer's locale.")
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }

   /**
   * The current status of the order. The status will be ‘incomplete’ until the customer has been successfully authorized.
   * @return status
  **/
  @ApiModelProperty(example = "CHECKOUT_INCOMPLETE", value = "The current status of the order. The status will be ‘incomplete’ until the customer has been successfully authorized.")
  public String getStatus() {
    return status;
  }

  public CheckoutOrder billingAddress(CheckoutAddress billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Provide the billing address of the customer, if you have collected already. If not, then Klarna will collect the details inside the Klarna Checkout iFrame before authorization. The billing address is the &#39;home address&#39; where the credit cards and bank accounts are registered under the customer&#39;s name.  Note: Once the customer has provided any data in the checkout iframe, updates to this object will be ignored (without generating an error).
   * @return billingAddress
  **/
  @ApiModelProperty(value = "Provide the billing address of the customer, if you have collected already. If not, then Klarna will collect the details inside the Klarna Checkout iFrame before authorization. The billing address is the 'home address' where the credit cards and bank accounts are registered under the customer's name.  Note: Once the customer has provided any data in the checkout iframe, updates to this object will be ignored (without generating an error).")
  public CheckoutAddress getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(CheckoutAddress billingAddress) {
    this.billingAddress = billingAddress;
  }

   /**
   * Provide the shipping address of the customer, if you have collected already. Unless the customer has explicitly chosen to enter a separate shipping address, this is a clone of billing_address. The customer has the possibility of changing the shipping address inside the Klarna checkout. You will be notified about the change either through the merchant URLs that you provide or through Javascript callbacks.
   * @return shippingAddress
  **/
  @ApiModelProperty(value = "Provide the shipping address of the customer, if you have collected already. Unless the customer has explicitly chosen to enter a separate shipping address, this is a clone of billing_address. The customer has the possibility of changing the shipping address inside the Klarna checkout. You will be notified about the change either through the merchant URLs that you provide or through Javascript callbacks.")
  public CheckoutAddress getShippingAddress() {
    return shippingAddress;
  }

  public CheckoutOrder orderAmount(Long orderAmount) {
    this.orderAmount = orderAmount;
    return this;
  }

   /**
   * \&quot;Total amount of the order including tax and any available discounts. The value should be in non-negative minor units.  Example: 25 Euros should be 2500.\&quot;
   * minimum: 0
   * @return orderAmount
  **/
  @ApiModelProperty(example = "50000", required = true, value = "\"Total amount of the order including tax and any available discounts. The value should be in non-negative minor units.  Example: 25 Euros should be 2500.\"")
  public Long getOrderAmount() {
    return orderAmount;
  }

  public void setOrderAmount(Long orderAmount) {
    this.orderAmount = orderAmount;
  }

  public CheckoutOrder orderTaxAmount(Long orderTaxAmount) {
    this.orderTaxAmount = orderTaxAmount;
    return this;
  }

   /**
   * Total tax amount of the order. The value should be in non-negative minor units.  Example: 25 Euros should be 2500.
   * minimum: 0
   * @return orderTaxAmount
  **/
  @ApiModelProperty(example = "4545", required = true, value = "Total tax amount of the order. The value should be in non-negative minor units.  Example: 25 Euros should be 2500.")
  public Long getOrderTaxAmount() {
    return orderTaxAmount;
  }

  public void setOrderTaxAmount(Long orderTaxAmount) {
    this.orderTaxAmount = orderTaxAmount;
  }

  public CheckoutOrder orderLines(List<CheckoutOrderLine> orderLines) {
    this.orderLines = orderLines;
    return this;
  }

  public CheckoutOrder addOrderLinesItem(CheckoutOrderLine orderLinesItem) {
    this.orderLines.add(orderLinesItem);
    return this;
  }

   /**
   * An array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.
   * @return orderLines
  **/
  @ApiModelProperty(required = true, value = "An array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.")
  public List<CheckoutOrderLine> getOrderLines() {
    return orderLines;
  }

  public void setOrderLines(List<CheckoutOrderLine> orderLines) {
    this.orderLines = orderLines;
  }

  public CheckoutOrder customer(CheckoutCustomer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Object to provide the details of the customer making the payment.
   * @return customer
  **/
  @ApiModelProperty(value = "Object to provide the details of the customer making the payment.")
  public CheckoutCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(CheckoutCustomer customer) {
    this.customer = customer;
  }

  public CheckoutOrder merchantUrls(CheckoutMerchantUrls merchantUrls) {
    this.merchantUrls = merchantUrls;
    return this;
  }

   /**
   * Used to send in the different merchant URLs that Klarna needs at different stages of the process.  Note: it should be HTTPS. Also, it can have {checkout.order.id}, {checkout.order.url} and/or {checkout.order.uri} and KCO will replace it accordingly.
   * @return merchantUrls
  **/
  @ApiModelProperty(required = true, value = "Used to send in the different merchant URLs that Klarna needs at different stages of the process.  Note: it should be HTTPS. Also, it can have {checkout.order.id}, {checkout.order.url} and/or {checkout.order.uri} and KCO will replace it accordingly.")
  public CheckoutMerchantUrls getMerchantUrls() {
    return merchantUrls;
  }

  public void setMerchantUrls(CheckoutMerchantUrls merchantUrls) {
    this.merchantUrls = merchantUrls;
  }

   /**
   * The HTML snippet that is used to render the checkout in an iframe.
   * @return htmlSnippet
  **/
  @ApiModelProperty(example = "<div id='klarna-checkout-container'><script>alert('Initializing Klarna Checkout');</script></div>", value = "The HTML snippet that is used to render the checkout in an iframe.")
  public String getHtmlSnippet() {
    return htmlSnippet;
  }

  public CheckoutOrder merchantReference1(String merchantReference1) {
    this.merchantReference1 = merchantReference1;
    return this;
  }

   /**
   * Used for storing merchant&#39;s internal order number or other reference. If set, will be shown on the confirmation page as \&quot;order number\&quot; . The value is also available in the settlement files. (max 255 characters). Example: \&quot;45aa52f387871e3a210645d4\&quot;
   * @return merchantReference1
  **/
  @ApiModelProperty(example = "45aa52f387871e3a210645d4", value = "Used for storing merchant's internal order number or other reference. If set, will be shown on the confirmation page as \"order number\" . The value is also available in the settlement files. (max 255 characters). Example: \"45aa52f387871e3a210645d4\"")
  public String getMerchantReference1() {
    return merchantReference1;
  }

  public void setMerchantReference1(String merchantReference1) {
    this.merchantReference1 = merchantReference1;
  }

  public CheckoutOrder merchantReference2(String merchantReference2) {
    this.merchantReference2 = merchantReference2;
    return this;
  }

   /**
   * Used for storing merchant&#39;s internal order number or other reference. The value is available in the settlement files. (max 255 characters). Example: \&quot;45aa52f387871e3a210645d4\&quot;
   * @return merchantReference2
  **/
  @ApiModelProperty(example = "45aa52f387871e3a210645d4", value = "Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters). Example: \"45aa52f387871e3a210645d4\"")
  public String getMerchantReference2() {
    return merchantReference2;
  }

  public void setMerchantReference2(String merchantReference2) {
    this.merchantReference2 = merchantReference2;
  }

   /**
   * ISO 8601 datetime. The date and time when the order has been created. The format will be as follows: \&quot;yyyy-mm-ddThh:mm:ssZ\&quot;
   * @return startedAt
  **/
  @ApiModelProperty(value = "ISO 8601 datetime. The date and time when the order has been created. The format will be as follows: \"yyyy-mm-ddThh:mm:ssZ\"")
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

   /**
   * ISO 8601 datetime. The date and time when the order has been completed. The format will be as follows: \&quot;yyyy-mm-ddThh:mm:ssZ\&quot;
   * @return completedAt
  **/
  @ApiModelProperty(value = "ISO 8601 datetime. The date and time when the order has been completed. The format will be as follows: \"yyyy-mm-ddThh:mm:ssZ\"")
  public OffsetDateTime getCompletedAt() {
    return completedAt;
  }

   /**
   * ISO 8601 datetime. The date and time when the order was last modified. The format will be as follows: \&quot;yyyy-mm-ddThh:mm:ssZ\&quot;
   * @return lastModifiedAt
  **/
  @ApiModelProperty(value = "ISO 8601 datetime. The date and time when the order was last modified. The format will be as follows: \"yyyy-mm-ddThh:mm:ssZ\"")
  public OffsetDateTime getLastModifiedAt() {
    return lastModifiedAt;
  }

  public CheckoutOrder options(CheckoutOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Customization options for the order.
   * @return options
  **/
  @ApiModelProperty(value = "Customization options for the order.")
  public CheckoutOptions getOptions() {
    return options;
  }

  public void setOptions(CheckoutOptions options) {
    this.options = options;
  }

  public CheckoutOrder attachment(CheckoutAttachment attachment) {
    this.attachment = attachment;
    return this;
  }

   /**
   * Extra Merchant Data (additional information) required for additional risk check. The required parameters will be described in the appendix of contract agreement.
   * @return attachment
  **/
  @ApiModelProperty(value = "Extra Merchant Data (additional information) required for additional risk check. The required parameters will be described in the appendix of contract agreement.")
  public CheckoutAttachment getAttachment() {
    return attachment;
  }

  public void setAttachment(CheckoutAttachment attachment) {
    this.attachment = attachment;
  }

  public CheckoutOrder externalPaymentMethods(List<CheckoutPaymentProvider> externalPaymentMethods) {
    this.externalPaymentMethods = externalPaymentMethods;
    return this;
  }

  public CheckoutOrder addExternalPaymentMethodsItem(CheckoutPaymentProvider externalPaymentMethodsItem) {
    if (this.externalPaymentMethods == null) {
      this.externalPaymentMethods = new ArrayList<CheckoutPaymentProvider>();
    }
    this.externalPaymentMethods.add(externalPaymentMethodsItem);
    return this;
  }

   /**
   * List of external payment methods that will be displayed as part of payment methods in the checkout.
   * @return externalPaymentMethods
  **/
  @ApiModelProperty(value = "List of external payment methods that will be displayed as part of payment methods in the checkout.")
  public List<CheckoutPaymentProvider> getExternalPaymentMethods() {
    return externalPaymentMethods;
  }

  public void setExternalPaymentMethods(List<CheckoutPaymentProvider> externalPaymentMethods) {
    this.externalPaymentMethods = externalPaymentMethods;
  }

  public CheckoutOrder externalCheckouts(List<CheckoutPaymentProvider> externalCheckouts) {
    this.externalCheckouts = externalCheckouts;
    return this;
  }

  public CheckoutOrder addExternalCheckoutsItem(CheckoutPaymentProvider externalCheckoutsItem) {
    if (this.externalCheckouts == null) {
      this.externalCheckouts = new ArrayList<CheckoutPaymentProvider>();
    }
    this.externalCheckouts.add(externalCheckoutsItem);
    return this;
  }

   /**
   * List of external checkouts that will be displayed as part of payment methods in the checkout.
   * @return externalCheckouts
  **/
  @ApiModelProperty(value = "List of external checkouts that will be displayed as part of payment methods in the checkout.")
  public List<CheckoutPaymentProvider> getExternalCheckouts() {
    return externalCheckouts;
  }

  public void setExternalCheckouts(List<CheckoutPaymentProvider> externalCheckouts) {
    this.externalCheckouts = externalCheckouts;
  }

  public CheckoutOrder shippingCountries(List<String> shippingCountries) {
    this.shippingCountries = shippingCountries;
    return this;
  }

  public CheckoutOrder addShippingCountriesItem(String shippingCountriesItem) {
    if (this.shippingCountries == null) {
      this.shippingCountries = new ArrayList<String>();
    }
    this.shippingCountries.add(shippingCountriesItem);
    return this;
  }

   /**
   * List of allowed shipping countries for this order in ISO-3166 alpha-2 format.  If specified, the customer will be able to change the shipping country in the checkout and you will be notified through ‘address_update’ callback or the ‘shipping_address_change’ javascript event.   If not specified then the default value will be the purchase country.  Example: look at billing_countries example.
   * @return shippingCountries
  **/
  @ApiModelProperty(example = "[\"us\",\"gb\"]", value = "List of allowed shipping countries for this order in ISO-3166 alpha-2 format.  If specified, the customer will be able to change the shipping country in the checkout and you will be notified through ‘address_update’ callback or the ‘shipping_address_change’ javascript event.   If not specified then the default value will be the purchase country.  Example: look at billing_countries example.")
  public List<String> getShippingCountries() {
    return shippingCountries;
  }

  public void setShippingCountries(List<String> shippingCountries) {
    this.shippingCountries = shippingCountries;
  }

  public CheckoutOrder shippingOptions(List<CheckoutShippingOption> shippingOptions) {
    this.shippingOptions = shippingOptions;
    return this;
  }

  public CheckoutOrder addShippingOptionsItem(CheckoutShippingOption shippingOptionsItem) {
    if (this.shippingOptions == null) {
      this.shippingOptions = new ArrayList<CheckoutShippingOption>();
    }
    this.shippingOptions.add(shippingOptionsItem);
    return this;
  }

   /**
   * A list of shipping options available for this order.
   * @return shippingOptions
  **/
  @ApiModelProperty(value = "A list of shipping options available for this order.")
  public List<CheckoutShippingOption> getShippingOptions() {
    return shippingOptions;
  }

  public void setShippingOptions(List<CheckoutShippingOption> shippingOptions) {
    this.shippingOptions = shippingOptions;
  }

  public CheckoutOrder merchantData(String merchantData) {
    this.merchantData = merchantData;
    return this;
  }

   /**
   * Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters).
   * @return merchantData
  **/
  @ApiModelProperty(example = "{\"marketplace_seller_info\":[{\"product_category\":\"Women's Fashion\",\"product_name\":\"Women Sweatshirt\"}]}", value = "Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters).")
  public String getMerchantData() {
    return merchantData;
  }

  public void setMerchantData(String merchantData) {
    this.merchantData = merchantData;
  }

  public CheckoutOrder gui(CheckoutGui gui) {
    this.gui = gui;
    return this;
  }

   /**
   * The gui object.
   * @return gui
  **/
  @ApiModelProperty(value = "The gui object.")
  public CheckoutGui getGui() {
    return gui;
  }

  public void setGui(CheckoutGui gui) {
    this.gui = gui;
  }

   /**
   * Provides information about the state of the fields requested by the merchant.
   * @return merchantRequested
  **/
  @ApiModelProperty(value = "Provides information about the state of the fields requested by the merchant.")
  public CheckoutMerchantRequested getMerchantRequested() {
    return merchantRequested;
  }

   /**
   * Current shipping options selected by the customer.
   * @return selectedShippingOption
  **/
  @ApiModelProperty(value = "Current shipping options selected by the customer.")
  public CheckoutShippingOption getSelectedShippingOption() {
    return selectedShippingOption;
  }

  public CheckoutOrder recurring(Boolean recurring) {
    this.recurring = recurring;
    return this;
  }

   /**
   * Indicates whether this purchase will create a token that can be used by the merchant to create recurring purchases. This must be enabled for the merchant to use. Default: false  Depending on specified country, recurring could be used for the following payment methods: Pay Later, Direct Debit, Card.
   * @return recurring
  **/
  @ApiModelProperty(value = "Indicates whether this purchase will create a token that can be used by the merchant to create recurring purchases. This must be enabled for the merchant to use. Default: false  Depending on specified country, recurring could be used for the following payment methods: Pay Later, Direct Debit, Card.")
  public Boolean isRecurring() {
    return recurring;
  }

  public void setRecurring(Boolean recurring) {
    this.recurring = recurring;
  }

   /**
   * Token to be used when creating recurring orders.
   * @return recurringToken
  **/
  @ApiModelProperty(value = "Token to be used when creating recurring orders.")
  public String getRecurringToken() {
    return recurringToken;
  }

   /**
   * Description to be added to the recurring order.
   * @return recurringDescription
  **/
  @ApiModelProperty(value = "Description to be added to the recurring order.")
  public String getRecurringDescription() {
    return recurringDescription;
  }

  public CheckoutOrder billingCountries(List<String> billingCountries) {
    this.billingCountries = billingCountries;
    return this;
  }

  public CheckoutOrder addBillingCountriesItem(String billingCountriesItem) {
    if (this.billingCountries == null) {
      this.billingCountries = new ArrayList<String>();
    }
    this.billingCountries.add(billingCountriesItem);
    return this;
  }

   /**
   * List of allowed billing countries for this order. If specified, the customer will be able to change the billing country in the checkout and you will be notified through ‘country_change’ callback or the ‘billing_address_change’ javascript event. If not specified then the default value will be the purchase country.  Example: [\&quot;AD\&quot;, \&quot;AE\&quot;, \&quot;AG\&quot;, \&quot;AI\&quot;, \&quot;AL\&quot;, \&quot;AM\&quot;, \&quot;AQ\&quot;, \&quot;AR\&quot;, \&quot;AS\&quot;, \&quot;AT\&quot;, \&quot;AU\&quot;, \&quot;AW\&quot;, \&quot;AX\&quot;, \&quot;AZ\&quot;, \&quot;BA\&quot;, \&quot;BB\&quot;, \&quot;BD\&quot;, \&quot;BE\&quot;, \&quot;BF\&quot;, \&quot;BG\&quot;, \&quot;BH\&quot;, \&quot;BJ\&quot;, \&quot;BL\&quot;, \&quot;BM\&quot;, \&quot;BN\&quot;, \&quot;BO\&quot;, \&quot;BQ\&quot;, \&quot;BR\&quot;, \&quot;BS\&quot;, \&quot;BT\&quot;, \&quot;BW\&quot;, \&quot;BY\&quot;, \&quot;BZ\&quot;, \&quot;CA\&quot;, \&quot;CF\&quot;, \&quot;CH\&quot;, \&quot;CI\&quot;, \&quot;CK\&quot;, \&quot;CL\&quot;, \&quot;CM\&quot;, \&quot;CN\&quot;, \&quot;CO\&quot;, \&quot;CR\&quot;, \&quot;CU\&quot;, \&quot;CV\&quot;, \&quot;CW\&quot;, \&quot;CX\&quot;, \&quot;CY\&quot;, \&quot;CZ\&quot;, \&quot;DE\&quot;, \&quot;DJ\&quot;, \&quot;DK\&quot;, \&quot;DM\&quot;, \&quot;DO\&quot;, \&quot;DZ\&quot;, \&quot;EC\&quot;, \&quot;EE\&quot;, \&quot;EG\&quot;, \&quot;ER\&quot;, \&quot;ES\&quot;, \&quot;ET\&quot;, \&quot;FI\&quot;, \&quot;FJ\&quot;, \&quot;FK\&quot;, \&quot;FM\&quot;, \&quot;FO\&quot;, \&quot;FR\&quot;, \&quot;GA\&quot;, \&quot;GB\&quot;, \&quot;GD\&quot;, \&quot;GE\&quot;, \&quot;GF\&quot;, \&quot;GG\&quot;, \&quot;GH\&quot;, \&quot;GI\&quot;, \&quot;GL\&quot;, \&quot;GM\&quot;, \&quot;GN\&quot;, \&quot;GP\&quot;, \&quot;GR\&quot;, \&quot;GS\&quot;, \&quot;GT\&quot;, \&quot;GU\&quot;, \&quot;GY\&quot;, \&quot;HK\&quot;, \&quot;HN\&quot;, \&quot;HR\&quot;, \&quot;HU\&quot;, \&quot;ID\&quot;, \&quot;IE\&quot;, \&quot;IL\&quot;, \&quot;IM\&quot;, \&quot;IN\&quot;, \&quot;IS\&quot;, \&quot;IT\&quot;, \&quot;JE\&quot;, \&quot;JM\&quot;, \&quot;JO\&quot;, \&quot;JP\&quot;, \&quot;KE\&quot;, \&quot;KG\&quot;, \&quot;KI\&quot;, \&quot;KM\&quot;, \&quot;KN\&quot;, \&quot;KR\&quot;, \&quot;KW\&quot;, \&quot;KY\&quot;, \&quot;KZ\&quot;, \&quot;LA\&quot;, \&quot;LA\&quot;, \&quot;LB\&quot;, \&quot;LC\&quot;, \&quot;LI\&quot;, \&quot;LK\&quot;, \&quot;LR\&quot;, \&quot;LS\&quot;, \&quot;LT\&quot;, \&quot;LU\&quot;, \&quot;LV\&quot;, \&quot;MA\&quot;, \&quot;MC\&quot;, \&quot;MD\&quot;, \&quot;ME\&quot;, \&quot;MF\&quot;, \&quot;MG\&quot;, \&quot;MH\&quot;, \&quot;MK\&quot;, \&quot;MK\&quot;, \&quot;ML\&quot;, \&quot;MM\&quot;, \&quot;MN\&quot;, \&quot;MO\&quot;, \&quot;MP\&quot;, \&quot;MQ\&quot;, \&quot;MR\&quot;, \&quot;MT\&quot;, \&quot;MU\&quot;, \&quot;MV\&quot;, \&quot;MW\&quot;, \&quot;MX\&quot;, \&quot;MY\&quot;, \&quot;MZ\&quot;, \&quot;NA\&quot;, \&quot;NC\&quot;, \&quot;NE\&quot;, \&quot;NF\&quot;, \&quot;NG\&quot;, \&quot;NI\&quot;, \&quot;NL\&quot;, \&quot;NO\&quot;, \&quot;NP\&quot;, \&quot;NR\&quot;, \&quot;NU\&quot;, \&quot;NZ\&quot;, \&quot;OM\&quot;, \&quot;PA\&quot;, \&quot;PE\&quot;, \&quot;PF\&quot;, \&quot;PG\&quot;, \&quot;PH\&quot;, \&quot;PK\&quot;, \&quot;PL\&quot;, \&quot;PM\&quot;, \&quot;PR\&quot;, \&quot;PS\&quot;, \&quot;PT\&quot;, \&quot;PW\&quot;, \&quot;PY\&quot;, \&quot;QA\&quot;, \&quot;RE\&quot;, \&quot;RO\&quot;, \&quot;RS\&quot;, \&quot;RU\&quot;, \&quot;RW\&quot;, \&quot;SA\&quot;, \&quot;SB\&quot;, \&quot;SC\&quot;, \&quot;SE\&quot;, \&quot;SG\&quot;, \&quot;SH\&quot;, \&quot;SI\&quot;, \&quot;SJ\&quot;, \&quot;SK\&quot;, \&quot;SL\&quot;, \&quot;SM\&quot;, \&quot;SN\&quot;, \&quot;SR\&quot;, \&quot;ST\&quot;, \&quot;SV\&quot;, \&quot;SX\&quot;, \&quot;SZ\&quot;, \&quot;TC\&quot;, \&quot;TF\&quot;, \&quot;TG\&quot;, \&quot;TH\&quot;, \&quot;TJ\&quot;, \&quot;TK\&quot;, \&quot;TL\&quot;, \&quot;TO\&quot;, \&quot;TR\&quot;, \&quot;TT\&quot;, \&quot;TV\&quot;, \&quot;TW\&quot;, \&quot;TZ\&quot;, \&quot;UA\&quot;, \&quot;UG\&quot;, \&quot;UM\&quot;, \&quot;US\&quot;, \&quot;UY\&quot;, \&quot;UZ\&quot;, \&quot;VA\&quot;, \&quot;VC\&quot;, \&quot;VG\&quot;, \&quot;VI\&quot;, \&quot;VN\&quot;, \&quot;VU\&quot;, \&quot;WF\&quot;, \&quot;WS\&quot;, \&quot;XK\&quot;, \&quot;YT\&quot;, \&quot;ZA\&quot;, \&quot;ZM\&quot;, \&quot;ZW\&quot;]\&quot;
   * @return billingCountries
  **/
  @ApiModelProperty(example = "[\"us\",\"gb\"]", value = "List of allowed billing countries for this order. If specified, the customer will be able to change the billing country in the checkout and you will be notified through ‘country_change’ callback or the ‘billing_address_change’ javascript event. If not specified then the default value will be the purchase country.  Example: [\"AD\", \"AE\", \"AG\", \"AI\", \"AL\", \"AM\", \"AQ\", \"AR\", \"AS\", \"AT\", \"AU\", \"AW\", \"AX\", \"AZ\", \"BA\", \"BB\", \"BD\", \"BE\", \"BF\", \"BG\", \"BH\", \"BJ\", \"BL\", \"BM\", \"BN\", \"BO\", \"BQ\", \"BR\", \"BS\", \"BT\", \"BW\", \"BY\", \"BZ\", \"CA\", \"CF\", \"CH\", \"CI\", \"CK\", \"CL\", \"CM\", \"CN\", \"CO\", \"CR\", \"CU\", \"CV\", \"CW\", \"CX\", \"CY\", \"CZ\", \"DE\", \"DJ\", \"DK\", \"DM\", \"DO\", \"DZ\", \"EC\", \"EE\", \"EG\", \"ER\", \"ES\", \"ET\", \"FI\", \"FJ\", \"FK\", \"FM\", \"FO\", \"FR\", \"GA\", \"GB\", \"GD\", \"GE\", \"GF\", \"GG\", \"GH\", \"GI\", \"GL\", \"GM\", \"GN\", \"GP\", \"GR\", \"GS\", \"GT\", \"GU\", \"GY\", \"HK\", \"HN\", \"HR\", \"HU\", \"ID\", \"IE\", \"IL\", \"IM\", \"IN\", \"IS\", \"IT\", \"JE\", \"JM\", \"JO\", \"JP\", \"KE\", \"KG\", \"KI\", \"KM\", \"KN\", \"KR\", \"KW\", \"KY\", \"KZ\", \"LA\", \"LA\", \"LB\", \"LC\", \"LI\", \"LK\", \"LR\", \"LS\", \"LT\", \"LU\", \"LV\", \"MA\", \"MC\", \"MD\", \"ME\", \"MF\", \"MG\", \"MH\", \"MK\", \"MK\", \"ML\", \"MM\", \"MN\", \"MO\", \"MP\", \"MQ\", \"MR\", \"MT\", \"MU\", \"MV\", \"MW\", \"MX\", \"MY\", \"MZ\", \"NA\", \"NC\", \"NE\", \"NF\", \"NG\", \"NI\", \"NL\", \"NO\", \"NP\", \"NR\", \"NU\", \"NZ\", \"OM\", \"PA\", \"PE\", \"PF\", \"PG\", \"PH\", \"PK\", \"PL\", \"PM\", \"PR\", \"PS\", \"PT\", \"PW\", \"PY\", \"QA\", \"RE\", \"RO\", \"RS\", \"RU\", \"RW\", \"SA\", \"SB\", \"SC\", \"SE\", \"SG\", \"SH\", \"SI\", \"SJ\", \"SK\", \"SL\", \"SM\", \"SN\", \"SR\", \"ST\", \"SV\", \"SX\", \"SZ\", \"TC\", \"TF\", \"TG\", \"TH\", \"TJ\", \"TK\", \"TL\", \"TO\", \"TR\", \"TT\", \"TV\", \"TW\", \"TZ\", \"UA\", \"UG\", \"UM\", \"US\", \"UY\", \"UZ\", \"VA\", \"VC\", \"VG\", \"VI\", \"VN\", \"VU\", \"WF\", \"WS\", \"XK\", \"YT\", \"ZA\", \"ZM\", \"ZW\"]\"")
  public List<String> getBillingCountries() {
    return billingCountries;
  }

  public void setBillingCountries(List<String> billingCountries) {
    this.billingCountries = billingCountries;
  }

  public CheckoutOrder tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public CheckoutOrder addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * \&quot;Extra information added to the order.  Example: [\&quot;dangerous_goods\&quot;, \&quot;bulky\&quot;]
   * @return tags
  **/
  @ApiModelProperty(example = "\"[\\\"dangerous_goods\\\", \\\"bulky\\\"]\"", value = "\"Extra information added to the order.  Example: [\"dangerous_goods\", \"bulky\"]")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutOrder order = (CheckoutOrder) o;
    return Objects.equals(this.orderId, order.orderId) &&
        Objects.equals(this.name, order.name) &&
        Objects.equals(this.purchaseCountry, order.purchaseCountry) &&
        Objects.equals(this.purchaseCurrency, order.purchaseCurrency) &&
        Objects.equals(this.locale, order.locale) &&
        Objects.equals(this.status, order.status) &&
        Objects.equals(this.billingAddress, order.billingAddress) &&
        Objects.equals(this.shippingAddress, order.shippingAddress) &&
        Objects.equals(this.orderAmount, order.orderAmount) &&
        Objects.equals(this.orderTaxAmount, order.orderTaxAmount) &&
        Objects.equals(this.orderLines, order.orderLines) &&
        Objects.equals(this.customer, order.customer) &&
        Objects.equals(this.merchantUrls, order.merchantUrls) &&
        Objects.equals(this.htmlSnippet, order.htmlSnippet) &&
        Objects.equals(this.merchantReference1, order.merchantReference1) &&
        Objects.equals(this.merchantReference2, order.merchantReference2) &&
        Objects.equals(this.startedAt, order.startedAt) &&
        Objects.equals(this.completedAt, order.completedAt) &&
        Objects.equals(this.lastModifiedAt, order.lastModifiedAt) &&
        Objects.equals(this.options, order.options) &&
        Objects.equals(this.attachment, order.attachment) &&
        Objects.equals(this.externalPaymentMethods, order.externalPaymentMethods) &&
        Objects.equals(this.externalCheckouts, order.externalCheckouts) &&
        Objects.equals(this.shippingCountries, order.shippingCountries) &&
        Objects.equals(this.shippingOptions, order.shippingOptions) &&
        Objects.equals(this.merchantData, order.merchantData) &&
        Objects.equals(this.gui, order.gui) &&
        Objects.equals(this.merchantRequested, order.merchantRequested) &&
        Objects.equals(this.selectedShippingOption, order.selectedShippingOption) &&
        Objects.equals(this.recurring, order.recurring) &&
        Objects.equals(this.recurringToken, order.recurringToken) &&
        Objects.equals(this.recurringDescription, order.recurringDescription) &&
        Objects.equals(this.billingCountries, order.billingCountries) &&
        Objects.equals(this.tags, order.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, name, purchaseCountry, purchaseCurrency, locale, status, billingAddress, shippingAddress, orderAmount, orderTaxAmount, orderLines, customer, merchantUrls, htmlSnippet, merchantReference1, merchantReference2, startedAt, completedAt, lastModifiedAt, options, attachment, externalPaymentMethods, externalCheckouts, shippingCountries, shippingOptions, merchantData, gui, merchantRequested, selectedShippingOption, recurring, recurringToken, recurringDescription, billingCountries, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutOrder {\n");
    
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    purchaseCountry: ").append(toIndentedString(purchaseCountry)).append("\n");
    sb.append("    purchaseCurrency: ").append(toIndentedString(purchaseCurrency)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    orderAmount: ").append(toIndentedString(orderAmount)).append("\n");
    sb.append("    orderTaxAmount: ").append(toIndentedString(orderTaxAmount)).append("\n");
    sb.append("    orderLines: ").append(toIndentedString(orderLines)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    merchantUrls: ").append(toIndentedString(merchantUrls)).append("\n");
    sb.append("    htmlSnippet: ").append(toIndentedString(htmlSnippet)).append("\n");
    sb.append("    merchantReference1: ").append(toIndentedString(merchantReference1)).append("\n");
    sb.append("    merchantReference2: ").append(toIndentedString(merchantReference2)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    lastModifiedAt: ").append(toIndentedString(lastModifiedAt)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    externalPaymentMethods: ").append(toIndentedString(externalPaymentMethods)).append("\n");
    sb.append("    externalCheckouts: ").append(toIndentedString(externalCheckouts)).append("\n");
    sb.append("    shippingCountries: ").append(toIndentedString(shippingCountries)).append("\n");
    sb.append("    shippingOptions: ").append(toIndentedString(shippingOptions)).append("\n");
    sb.append("    merchantData: ").append(toIndentedString(merchantData)).append("\n");
    sb.append("    gui: ").append(toIndentedString(gui)).append("\n");
    sb.append("    merchantRequested: ").append(toIndentedString(merchantRequested)).append("\n");
    sb.append("    selectedShippingOption: ").append(toIndentedString(selectedShippingOption)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    recurringToken: ").append(toIndentedString(recurringToken)).append("\n");
    sb.append("    recurringDescription: ").append(toIndentedString(recurringDescription)).append("\n");
    sb.append("    billingCountries: ").append(toIndentedString(billingCountries)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

